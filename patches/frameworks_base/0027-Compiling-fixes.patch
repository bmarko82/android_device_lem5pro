From b56a0fe91bbf9f97c84704fa218e3f964b6f4e33 Mon Sep 17 00:00:00 2001
From: fire855 <thefire855@gmail.com>
Date: Thu, 14 Apr 2016 15:04:20 +0200
Subject: [PATCH] Compiling fixes

Change-Id: I17ddadfce34457f56150e975eb5fdad434b61acc
---
 media/jni/android_media_ImageReader.cpp | 40 ++++++++++++++++-----------------
 media/jni/android_media_ImageWriter.cpp |  2 +-
 2 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/media/jni/android_media_ImageReader.cpp b/media/jni/android_media_ImageReader.cpp
index 0e998bdeb7945..81171a30f5848 100644
--- a/media/jni/android_media_ImageReader.cpp
+++ b/media/jni/android_media_ImageReader.cpp
@@ -93,8 +93,8 @@ class JNIImageReaderContext : public ConsumerBase::FrameAvailableListener
     CpuConsumer::LockedBuffer* getLockedBuffer();
     void returnLockedBuffer(CpuConsumer::LockedBuffer* buffer);
 
-    BufferItem* getOpaqueBuffer();
-    void returnOpaqueBuffer(BufferItem* buffer);
+    BufferQueue::BufferItem* getOpaqueBuffer();
+    void returnOpaqueBuffer(BufferQueue::BufferItem* buffer);
 
     void setCpuConsumer(const sp<CpuConsumer>& consumer) { mConsumer = consumer; }
     CpuConsumer* getCpuConsumer() { return mConsumer.get(); }
@@ -124,7 +124,7 @@ class JNIImageReaderContext : public ConsumerBase::FrameAvailableListener
     static void detachJNI();
 
     List<CpuConsumer::LockedBuffer*> mBuffers;
-    List<BufferItem*> mOpaqueBuffers;
+    List<BufferQueue::BufferItem*> mOpaqueBuffers;
     sp<CpuConsumer> mConsumer;
     sp<BufferItemConsumer> mOpaqueConsumer;
     sp<IGraphicBufferProducer> mProducer;
@@ -142,7 +142,7 @@ JNIImageReaderContext::JNIImageReaderContext(JNIEnv* env,
     mClazz((jclass)env->NewGlobalRef(clazz)) {
     for (int i = 0; i < maxImages; i++) {
         CpuConsumer::LockedBuffer *buffer = new CpuConsumer::LockedBuffer;
-        BufferItem* opaqueBuffer = new BufferItem;
+        BufferQueue::BufferItem* opaqueBuffer = new BufferQueue::BufferItem;
         mBuffers.push_back(buffer);
         mOpaqueBuffers.push_back(opaqueBuffer);
     }
@@ -188,18 +188,18 @@ void JNIImageReaderContext::returnLockedBuffer(CpuConsumer::LockedBuffer* buffer
     mBuffers.push_back(buffer);
 }
 
-BufferItem* JNIImageReaderContext::getOpaqueBuffer() {
+BufferQueue::BufferItem* JNIImageReaderContext::getOpaqueBuffer() {
     if (mOpaqueBuffers.empty()) {
         return NULL;
     }
     // Return an opaque buffer pointer and remove it from the list
-    List<BufferItem*>::iterator it = mOpaqueBuffers.begin();
-    BufferItem* buffer = *it;
+    List<BufferQueue::BufferItem*>::iterator it = mOpaqueBuffers.begin();
+    BufferQueue::BufferItem* buffer = *it;
     mOpaqueBuffers.erase(it);
     return buffer;
 }
 
-void JNIImageReaderContext::returnOpaqueBuffer(BufferItem* buffer) {
+void JNIImageReaderContext::returnOpaqueBuffer(BufferQueue::BufferItem* buffer) {
     mOpaqueBuffers.push_back(buffer);
 }
 
@@ -223,7 +223,7 @@ JNIImageReaderContext::~JNIImageReaderContext() {
     }
 
     // Delete opaque buffers
-    for (List<BufferItem *>::iterator it = mOpaqueBuffers.begin();
+    for (List<BufferQueue::BufferItem *>::iterator it = mOpaqueBuffers.begin();
             it != mOpaqueBuffers.end(); it++) {
         delete *it;
     }
@@ -327,7 +327,7 @@ static void Image_setBuffer(JNIEnv* env, jobject thiz,
 }
 
 static void Image_setOpaqueBuffer(JNIEnv* env, jobject thiz,
-        const BufferItem* buffer)
+        const BufferQueue::BufferItem* buffer)
 {
     env->SetLongField(thiz, gSurfaceImageClassInfo.mNativeBuffer, reinterpret_cast<jlong>(buffer));
 }
@@ -717,13 +717,13 @@ static BufferItemConsumer* ImageReader_getOpaqueConsumer(JNIEnv* env, jobject th
     return ctx->getOpaqueConsumer();
 }
 
-static BufferItem* Image_getOpaqueBuffer(JNIEnv* env, jobject image)
+static BufferQueue::BufferItem* Image_getOpaqueBuffer(JNIEnv* env, jobject image)
 {
-    return reinterpret_cast<BufferItem*>(
+    return reinterpret_cast<BufferQueue::BufferItem*>(
             env->GetLongField(image, gSurfaceImageClassInfo.mNativeBuffer));
 }
 
-static int Image_getOpaqueBufferWidth(BufferItem* buffer) {
+static int Image_getOpaqueBufferWidth(BufferQueue::BufferItem* buffer) {
     if (buffer == NULL) return -1;
 
     if (!buffer->mCrop.isEmpty()) {
@@ -732,7 +732,7 @@ static int Image_getOpaqueBufferWidth(BufferItem* buffer) {
     return buffer->mGraphicBuffer->getWidth();
 }
 
-static int Image_getOpaqueBufferHeight(BufferItem* buffer) {
+static int Image_getOpaqueBufferHeight(BufferQueue::BufferItem* buffer) {
     if (buffer == NULL) return -1;
 
     if (!buffer->mCrop.isEmpty()) {
@@ -925,7 +925,7 @@ static void ImageReader_imageRelease(JNIEnv* env, jobject thiz, jobject image)
 
     if (ctx->isOpaque()) {
         BufferItemConsumer* opaqueConsumer = ctx->getOpaqueConsumer();
-        BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, image);
+        BufferQueue::BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, image);
         opaqueConsumer->releaseBuffer(*opaqueBuffer); // Not using fence for now.
         Image_setOpaqueBuffer(env, image, NULL);
         ctx->returnOpaqueBuffer(opaqueBuffer);
@@ -952,7 +952,7 @@ static jint ImageReader_opaqueImageSetup(JNIEnv* env, JNIImageReaderContext* ctx
     }
 
     BufferItemConsumer* opaqueConsumer = ctx->getOpaqueConsumer();
-    BufferItem* buffer = ctx->getOpaqueBuffer();
+    BufferQueue::BufferItem* buffer = ctx->getOpaqueBuffer();
     if (buffer == NULL) {
         ALOGW("Unable to acquire a buffer item, very likely client tried to acquire more than"
             " maxImages buffers");
@@ -1107,7 +1107,7 @@ static jint ImageReader_detachImage(JNIEnv* env, jobject thiz, jobject image) {
     }
 
     BufferItemConsumer* opaqueConsumer = ctx->getOpaqueConsumer();
-    BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, image);
+    BufferQueue::BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, image);
     if (!opaqueBuffer) {
         ALOGE(
                 "Opaque Image already released and can not be detached from ImageReader!!!");
@@ -1116,7 +1116,7 @@ static jint ImageReader_detachImage(JNIEnv* env, jobject thiz, jobject image) {
         return -1;
     }
 
-    res = opaqueConsumer->detachBuffer(opaqueBuffer->mSlot);
+    res = opaqueConsumer->detachBuffer(opaqueBuffer->mBuf);
     if (res != OK) {
         ALOGE("Opaque Image detach failed: %s (%d)!!!", strerror(-res), res);
         jniThrowRuntimeException(env,
@@ -1215,7 +1215,7 @@ static jobject Image_getByteBuffer(JNIEnv* env, jobject thiz, int idx, int reade
 static jint Image_getWidth(JNIEnv* env, jobject thiz, jint format)
 {
     if (isFormatOpaque(format)) {
-        BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, thiz);
+        BufferQueue::BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, thiz);
         return Image_getOpaqueBufferWidth(opaqueBuffer);
     } else {
         CpuConsumer::LockedBuffer* buffer = Image_getLockedBuffer(env, thiz);
@@ -1226,7 +1226,7 @@ static jint Image_getWidth(JNIEnv* env, jobject thiz, jint format)
 static jint Image_getHeight(JNIEnv* env, jobject thiz, jint format)
 {
     if (isFormatOpaque(format)) {
-        BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, thiz);
+        BufferQueue::BufferItem* opaqueBuffer = Image_getOpaqueBuffer(env, thiz);
         return Image_getOpaqueBufferHeight(opaqueBuffer);
     } else {
         CpuConsumer::LockedBuffer* buffer = Image_getLockedBuffer(env, thiz);
diff --git a/media/jni/android_media_ImageWriter.cpp b/media/jni/android_media_ImageWriter.cpp
index f92a8eff3919d..65f8e84174b6a 100644
--- a/media/jni/android_media_ImageWriter.cpp
+++ b/media/jni/android_media_ImageWriter.cpp
@@ -520,7 +520,7 @@ static jint ImageWriter_attachAndQueueImage(JNIEnv* env, jobject thiz, jlong nat
 
     // Image is guaranteed to be from ImageReader at this point, so it is safe to
     // cast to BufferItem pointer.
-    BufferItem* opaqueBuffer = reinterpret_cast<BufferItem*>(nativeBuffer);
+    BufferQueue::BufferItem* opaqueBuffer = reinterpret_cast<BufferQueue::BufferItem*>(nativeBuffer);
     if (opaqueBuffer == NULL) {
         jniThrowException(env, "java/lang/IllegalStateException",
                 "Image is not initialized or already closed");
