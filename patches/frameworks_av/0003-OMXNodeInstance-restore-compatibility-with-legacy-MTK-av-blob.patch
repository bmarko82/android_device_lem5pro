From 1ff8d834445e87bf015dc8223db838794f980180 Mon Sep 17 00:00:00 2001
From: Wang Xuerui <idontknw.wang@gmail.com>
Date: Tue, 29 Sep 2015 11:13:10 +0800
Subject: [PATCH] OMXNodeInstance: restore compatibility with legacy MTK av
 blob

Change-Id: I40bd6a78eac1cea54b43c78629b3e457c3839491
---
 media/libmedia/Android.mk                      |  1 +
 media/libmedia/mtkaudio_stubs.cpp              | 52 ++++++++++++++------------
 media/libstagefright/include/OMXNodeInstance.h |  3 ++
 media/libstagefright/omx/Android.mk            |  6 +++
 media/libstagefright/omx/OMXNodeInstance.cpp   | 21 +++++++++++
 5 files changed, 59 insertions(+), 24 deletions(-)

diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index 2ad913aba45..f66a784c48a 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -106,6 +106,7 @@ LOCAL_SRC_FILES += \
 
 # StrongPointer.h
 LOCAL_C_INCLUDES += $(TOP)/frameworks/rs/server
+endif
 
 include $(BUILD_SHARED_LIBRARY)
 
diff --git a/media/libmedia/mtkaudio_stubs.cpp b/media/libmedia/mtkaudio_stubs.cpp
index f67277cddc0..2d9f2cc7a81 100644
--- a/media/libmedia/mtkaudio_stubs.cpp
+++ b/media/libmedia/mtkaudio_stubs.cpp
@@ -34,7 +34,7 @@ int AudioSystem::GetVoiceUnlockDLLatency()
   return 0;
 }
 
-int AudioSystem::SetVoiceUnlockSRC(uint outSR, uint outChannel)
+int AudioSystem::SetVoiceUnlockSRC(uint outSR __unused, uint outChannel __unused)
 {
   return 0;
 }
@@ -49,12 +49,16 @@ bool AudioSystem::startVoiceUnlockDL()
   return 0;
 }
 
-int AudioSystem::ReadRefFromRing(void*buf, uint32_t datasz,void* DLtime)
+int AudioSystem::ReadRefFromRing(
+        void *buf __unused,
+        uint32_t datasz __unused,
+        void* DLtime __unused
+        )
 {
   return 0;
 }
 
-int AudioSystem::GetVoiceUnlockULTime(void* DLtime)
+int AudioSystem::GetVoiceUnlockULTime(void* DLtime __unused)
 {
   return 0;
 }
@@ -88,15 +92,15 @@ class BpATVCtrlService : public BpInterface<IATVCtrlService>
     {
         return 0;
     }
-    virtual int ATVCS_matv_ps_init(int on)
+    virtual int ATVCS_matv_ps_init(int on __unused)
     {
         return 0;
     }
-    virtual int ATVCS_matv_set_parameterb(int in)
+    virtual int ATVCS_matv_set_parameterb(int in __unused)
     {
         return 0;
     }
-    virtual int ATVCS_matv_suspend(int on)
+    virtual int ATVCS_matv_suspend(int on __unused)
     {
         return 0;
     }
@@ -104,17 +108,17 @@ class BpATVCtrlService : public BpInterface<IATVCtrlService>
     {
         return 0;
     }
-    virtual void ATVCS_matv_chscan(int mode)
+    virtual void ATVCS_matv_chscan(int mode __unused)
     {
     }
     virtual void ATVCS_matv_chscan_stop()
     {
     }
-    virtual int ATVCS_matv_get_chtable(int ch, void *entry, int len)
+    virtual int ATVCS_matv_get_chtable(int ch __unused, void *entry __unused, int len __unused)
     {
         return 0;
     }
-    virtual int ATVCS_matv_set_chtable(int ch, void *entry, int len)
+    virtual int ATVCS_matv_set_chtable(int ch __unused, void *entry __unused, int len __unused)
     {
         return 0;
     }
@@ -122,13 +126,13 @@ class BpATVCtrlService : public BpInterface<IATVCtrlService>
     {
         return 0;
     }
-    virtual void ATVCS_matv_change_channel(int ch)
+    virtual void ATVCS_matv_change_channel(int ch __unused)
     {
     }
-    virtual void ATVCS_matv_set_country(int country)
+    virtual void ATVCS_matv_set_country(int country __unused)
     {
     }
-    virtual void ATVCS_matv_set_tparam(int mode)
+    virtual void ATVCS_matv_set_tparam(int mode __unused)
     {
     }
     virtual void ATVCS_matv_audio_play()
@@ -141,38 +145,38 @@ class BpATVCtrlService : public BpInterface<IATVCtrlService>
     {
         return 0;
     }
-    virtual void ATVCS_matv_audio_set_format(int val)
+    virtual void ATVCS_matv_audio_set_format(int val __unused)
     {
     }
     virtual int ATVCS_matv_audio_get_sound_system()
     {
         return 0;
     }
-    virtual int ATVCS_matv_adjust(int item, int val)
+    virtual int ATVCS_matv_adjust(int item __unused, int val __unused)
     {
         return 0;
     }
-    virtual int ATVCS_matv_get_chipdep(int item)
+    virtual int ATVCS_matv_get_chipdep(int item __unused)
     {
         return 0;
     }
-    virtual int ATVCS_matv_set_chipdep(int item, int val)
+    virtual int ATVCS_matv_set_chipdep(int item __unused, int val __unused)
     {
         return 0;
     }
     virtual void ATVCS_matv_register_callback()
     {
     }
-    virtual void registerClient(const sp<IATVCtrlClient>& client)
+    virtual void registerClient(const sp<IATVCtrlClient>& client __unused)
     {
     }
-    virtual void registerClient_FM(const sp<IATVCtrlClient>& client)
+    virtual void registerClient_FM(const sp<IATVCtrlClient>& client __unused)
     {
     }
-    virtual void CLI(char input)
+    virtual void CLI(char input __unused)
     {
     }
-    virtual int ATVCS_fm_powerup(void *parm, int len)
+    virtual int ATVCS_fm_powerup(void *parm __unused, int len __unused)
     {
         return 0;
     }
@@ -184,19 +188,19 @@ class BpATVCtrlService : public BpInterface<IATVCtrlService>
     {
         return 0;
     }
-    virtual int ATVCS_fm_tune(void *parm, int len)
+    virtual int ATVCS_fm_tune(void *parm __unused, int len __unused)
     {
         return 0;
     }
-    virtual int ATVCS_fm_seek(void *parm, int len)
+    virtual int ATVCS_fm_seek(void *parm __unused, int len __unused)
     {
         return 0;
     }
-    virtual int ATVCS_fm_scan(void *parm, int len)
+    virtual int ATVCS_fm_scan(void *parm __unused, int len __unused)
     {
         return 0;
     }
-    virtual int ATVCS_fm_mute(int val)
+    virtual int ATVCS_fm_mute(int val __unused)
     {
         return 0;
     }
diff --git a/media/libstagefright/include/OMXNodeInstance.h b/media/libstagefright/include/OMXNodeInstance.h
index f68e0a91b1c..6c483aab814 100644
--- a/media/libstagefright/include/OMXNodeInstance.h
+++ b/media/libstagefright/include/OMXNodeInstance.h
@@ -156,10 +156,13 @@ struct OMXNodeInstance {
     };
     Vector<ActiveBuffer> mActiveBuffers;
     // for buffer ptr to buffer id translation
+    // but don't enable for use with MTK Lollipop- blob
+#ifndef USE_LEGACY_MTK_AV_BLOB
     Mutex mBufferIDLock;
     uint32_t mBufferIDCount;
     KeyedVector<OMX::buffer_id, OMX_BUFFERHEADERTYPE *> mBufferIDToBufferHeader;
     KeyedVector<OMX_BUFFERHEADERTYPE *, OMX::buffer_id> mBufferHeaderToBufferID;
+#endif
     MetadataBufferType mMetadataType[2];
     bool mGraphicBufferEnabled[2];
 
diff --git a/media/libstagefright/omx/Android.mk b/media/libstagefright/omx/Android.mk
index d16d5df1204..31a0c4f1e71 100644
--- a/media/libstagefright/omx/Android.mk
+++ b/media/libstagefright/omx/Android.mk
@@ -36,6 +36,12 @@ ifeq ($(strip $(AUDIO_FEATURE_ENABLED_EXTN_FLAC_DECODER)),true)
 endif
 endif
 
+ifeq ($(BOARD_USES_MTK_HARDWARE),true)
+ifeq ($(BOARD_USES_LEGACY_MTK_AV_BLOB),true)
+LOCAL_CFLAGS += -DUSE_LEGACY_MTK_AV_BLOB
+endif
+endif
+
 LOCAL_MODULE:= libstagefright_omx
 LOCAL_CFLAGS += -Werror -Wall
 LOCAL_CLANG := true
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index bdd1039d10d..f19745b3b1c 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -1598,6 +1598,8 @@ void OMXNodeInstance::freeActiveBuffers() {
     }
 }
 
+#ifndef USE_LEGACY_MTK_AV_BLOB
+
 OMX::buffer_id OMXNodeInstance::makeBufferID(OMX_BUFFERHEADERTYPE *bufferHeader) {
     if (bufferHeader == NULL) {
         return 0;
@@ -1655,4 +1657,23 @@ void OMXNodeInstance::invalidateBufferID(OMX::buffer_id buffer) {
     mBufferIDToBufferHeader.removeItemsAt(index);
 }
 
+#else
+
+OMX::buffer_id OMXNodeInstance::makeBufferID(OMX_BUFFERHEADERTYPE *bufferHeader) {
+    return (OMX::buffer_id)bufferHeader;
+}
+
+OMX_BUFFERHEADERTYPE *OMXNodeInstance::findBufferHeader(OMX::buffer_id buffer) {
+    return (OMX_BUFFERHEADERTYPE *)buffer;
+}
+
+OMX::buffer_id OMXNodeInstance::findBufferID(OMX_BUFFERHEADERTYPE *bufferHeader) {
+    return (OMX::buffer_id)bufferHeader;
+}
+
+void OMXNodeInstance::invalidateBufferID(OMX::buffer_id buffer __unused) {
+}
+
+#endif
+
 }  // namespace android
